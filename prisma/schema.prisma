// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  firstName     String
  middleName    String?
  lastName      String
  role          UserRole      @default(traveler)
  email         String        @unique
  password      String
  token         String?
  validation    Boolean       @default(false)
  confirmedCode Int?
  Profile       Profile[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Reviews       Reviews[]
  BookedHotel   BookedHotel[]
  PackagePlan   PackagePlan[]

  @@map("users")
}

model Profile {
  userId       String
  bio          String?
  country      String?
  division     String?
  district     String?
  area         String?
  nid          String?
  passport     String?
  contactNo    String?
  profileImage String?
  dateOfBirth  String?
  gender       String?
  user         User    @relation(fields: [userId], references: [id])

  @@id([userId])
  @@map("profiles")
}

model Division {
  id        String     @id @default(uuid())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  District  District[]

  @@map("division")
}

model District {
  id            String      @id @default(uuid())
  title         String
  districtImage String
  divisionId    String
  division      Division    @relation(fields: [divisionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Place         Place[]
  Hotel         Hotel[]
  Transport     Transport[]

  @@map("district")
}

model Place {
  id            String          @id @default(uuid())
  title         String
  placeImage    String
  description   String
  districtId    String
  district      District        @relation(fields: [districtId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PackagePlaces PackagePlaces[]

  @@map("places")
}

model Hotel {
  id             String        @id @default(uuid())
  title          String
  hotelImage     String
  description    String
  districtId     String
  contactNo      String
  location       String
  mapLocationUrl String?
  district       District      @relation(fields: [districtId], references: [id])
  hotelType      HotelType
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Room           Room[]
  PackagePlan    PackagePlan[]

  @@map("hotels")
}

model Room {
  id             String           @id @default(uuid())
  roomType       String
  description    String?
  roomImages     Json[]
  roomPrice      Int
  checkInTime    String
  checkOutTime   String
  hotelId        String
  hotel          Hotel            @relation(fields: [hotelId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RoomFacilities RoomFacilities[]
  BookedHotel    BookedHotel[]
  Reviews        Reviews[]

  @@map("rooms")
}

model FacilitiesOptions {
  id             String           @id @default(uuid())
  title          String
  image          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RoomFacilities RoomFacilities[]

  @@map("facilitiesOptions")
}

model RoomFacilities {
  id                  String            @id @default(uuid())
  roomId              String
  FacilitiesOptionsId String
  room                Room              @relation(fields: [roomId], references: [id])
  facilitiesOptions   FacilitiesOptions @relation(fields: [FacilitiesOptionsId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("roomFacilities")
}

model Transport {
  id              String        @id @default(uuid())
  transportName   String
  transportType   TransportType
  transportImages String
  transportPrice  Int
  driverContactNo String
  passengerSize   String
  districtId      String
  district        District      @relation(fields: [districtId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Reviews         Reviews[]
  BookedHotel     BookedHotel[]

  @@map("transports")
}

model PackagePlan {
  id              String          @id @default(uuid())
  packageName     String
  thumbnail       String
  description     String
  hotelId         String
  guideId         String
  travlerSize     Int
  bookedTraveller Int
  startDate       String
  endDate         String
  StartLocation   String
  endLocation     String
  contactManager  String
  planStatus      Confirmation    @default(Panding)
  hotel           Hotel           @relation(fields: [hotelId], references: [id])
  guide           User            @relation(fields: [guideId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Reviews         Reviews[]
  PackagePlaces   PackagePlaces[]

  @@map("package_plans")
}

model PackagePlaces {
  id          String      @id @default(uuid())
  packageId   String
  placeId     String
  packagePlan PackagePlan @relation(fields: [packageId], references: [id])
  place       Place       @relation(fields: [placeId], references: [id])

  @@map("package_places")
}

model BookedPackage {
  id                 String @id @default(uuid())
  userId             String
  travelingMember    String
  contactNo          String
  emergencyContactNo String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("booked_package")
}

model Reviews {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  serviceId   String
  room        Room        @relation(fields: [serviceId], references: [id], map: "room_reviews_fkey")
  transport   Transport   @relation(fields: [serviceId], references: [id], map: "transport_reviews_fkey")
  packagePlan PackagePlan @relation(fields: [serviceId], references: [id], map: "packagePlan_reviews_fkey")
  rating      String
  text        String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("reviews")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  userId      String
  description String
  thumbnail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blogs")
}

model BookedHotel {
  id                            String       @id @default(uuid())
  userId                        String
  roomId                        String
  roomCheckInDate               String
  roomCheckOutDate              String
  transportId                   String
  transportReservationStartDate String
  transportReservationEndDate   String
  roomConfirmation              Confirmation @default(Panding)
  roomNo                        String?
  roomFloor                     String?
  room                          Room         @relation(fields: [roomId], references: [id])
  user                          User         @relation(fields: [userId], references: [id])
  transport                     Transport    @relation(fields: [transportId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("booked_hotel")
}

model FeedbackForm {
  id          String   @id @default(uuid())
  userId      String
  subject     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("feedback_form")
}

enum UserRole {
  super_admin
  head_manager
  district_coordinator
  guide
  traveler
}

enum HotelType {
  Five_star
  Four_star
  Three_star
  Two_star
  One_star
  Cottage
  Resort
  Vilas
}

enum Confirmation {
  Panding
  Confirmed
  Canceled
  Completed
}

enum TransportType {
  ByRoad
  ByBoat
}

// wifi                    Boolean @default(false)
// free_parking            Boolean @default(false)
// private_bathroom        Boolean @default(false)
// shower                  Boolean @default(false)
// swimming_pool           Boolean @default(false)
// air_conditioning        Boolean @default(false)
// television              Boolean @default(false)
// mountain_View           Boolean @default(false)
// garden                  Boolean @default(false)
// free_breakfast          Boolean @default(false)
// resturant               Boolean @default(false)
// hot_Tub                 Boolean @default(false)
// spa_and_wellness_center Boolean @default(false)
// sea_view                Boolean @default(false)
// room_service            Boolean @default(false)
// fitness_Center          Boolean @default(false)
// beachFront              Boolean @default(false)
// no_smoking_room         Boolean @default(false)

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  firstName   String
  middleName  String?
  lastName    String
  role        UserRole      @default(user)
  email       String        @unique
  password    String
  token       String?
  Profile     Profile[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reviews     Reviews[]
  BookedHotel BookedHotel[]
}

model Profile {
  userId       String
  bio          String?
  country      String?
  division     String?
  district     String?
  area         String?
  nid          String?
  passport     String?
  contactNo    String?
  profileImage String?
  dateOfBirth  String?
  gender       String?
  user         User    @relation(fields: [userId], references: [id])

  @@id([userId])
}

model Division {
  id        String     @id @default(uuid())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  District  District[]
}

model District {
  id              String            @id @default(uuid())
  title           String
  districtImage   String
  divisionId      String
  division        Division          @relation(fields: [divisionId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Place           Place[]
  Hotel           Hotel[]
  AddToCartFields AddToCartFields[]
}

model Place {
  id          String   @id @default(uuid())
  title       String
  placeImage  String
  description String
  districtId  String
  district    District @relation(fields: [districtId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Hotel {
  id             String    @id @default(uuid())
  title          String
  hotelImage     String
  description    String
  districtId     String
  contactNo      String
  location       String
  mapLocationUrl String?
  district       District  @relation(fields: [districtId], references: [id])
  hotelType      HotelType
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Room           Room[]
}

model Room {
  id              String            @id @default(uuid())
  roomType        String
  description     String?
  roomImages      Json[]
  roomPrice       Int
  checkInTime     String
  checkOutTime    String
  hotelId         String
  hotel           Hotel             @relation(fields: [hotelId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  RoomFacilities  RoomFacilities[]
  AddToCartFields AddToCartFields[]
  BookedHotel     BookedHotel[]
  Reviews         Reviews[]
}

model FacilitiesOptions {
  id             String           @id @default(uuid())
  title          String
  image          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RoomFacilities RoomFacilities[]
}

model RoomFacilities {
  id                  String            @id @default(uuid())
  roomId              String
  FacilitiesOptionsId String
  room                Room              @relation(fields: [roomId], references: [id])
  facilitiesOptions   FacilitiesOptions @relation(fields: [FacilitiesOptionsId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model AddToCartFields {
  id                String   @id @default(uuid())
  roomId            String
  districtId        String
  byRoadTransportId String
  byBoatTransportId String
  byAirTransportId  String
  packageId         String
  room              Room     @relation(fields: [roomId], references: [id])
  district          District @relation(fields: [districtId], references: [id])
}

model Reviews {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])
  rating String
  text   String @default("")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  userId      String
  description String
  thumbnail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BookedHotel {
  id               String           @id @default(uuid())
  userId           String
  roomId           String
  checkInDate      String
  checkOutDate     String
  roomConfirmation RoomConfirmation @default(Panding)
  roomNo           String?
  roomFloor        String?
  room             Room             @relation(fields: [roomId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedbackForm {
  id          String   @id @default(uuid())
  userId      String
  subject     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  super_admin
  admin
  user
}

enum HotelType {
  Fivestar
  Fourstar
  Threestar
  Twostar
  Onestar
  Resort
  Vilas
}

enum RoomConfirmation {
  Panding
  Confirmed
  Canceled
}

// wifi                    Boolean @default(false)
// free_parking            Boolean @default(false)
// private_bathroom        Boolean @default(false)
// shower                  Boolean @default(false)
// swimming_pool           Boolean @default(false)
// air_conditioning        Boolean @default(false)
// television              Boolean @default(false)
// mountain_View           Boolean @default(false)
// garden                  Boolean @default(false)
// free_breakfast          Boolean @default(false)
// resturant               Boolean @default(false)
// hot_Tub                 Boolean @default(false)
// spa_and_wellness_center Boolean @default(false)
// sea_view                Boolean @default(false)
// room_service            Boolean @default(false)
// fitness_Center          Boolean @default(false)
// beachFront              Boolean @default(false)
// no_smoking_room         Boolean @default(false)
